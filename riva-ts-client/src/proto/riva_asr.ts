// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: riva_asr.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { AudioConfig } from "./riva_services";

export const protobufPackage = "nvidia.riva";

export interface RecognizeRequest {
  config: AudioConfig | undefined;
  audio: Uint8Array;
  model: string;
}

export interface RecognizeResponse {
  results: RecognizeResponse_Result[];
}

export interface RecognizeResponse_Result {
  transcript: string;
  confidence: number;
  words: WordInfo[];
}

export interface StreamingRecognizeRequest {
  config?: AudioConfig | undefined;
  audioContent?: Uint8Array | undefined;
}

export interface StreamingRecognizeResponse {
  results: StreamingRecognizeResponse_Result[];
}

export interface StreamingRecognizeResponse_Result {
  transcript: string;
  confidence: number;
  isFinal: boolean;
  words: WordInfo[];
}

export interface WordInfo {
  word: string;
  startTime: number;
  endTime: number;
  confidence: number;
}

function createBaseRecognizeRequest(): RecognizeRequest {
  return { config: undefined, audio: new Uint8Array(0), model: "" };
}

export const RecognizeRequest = {
  encode(message: RecognizeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      AudioConfig.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    if (message.audio.length !== 0) {
      writer.uint32(18).bytes(message.audio);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecognizeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecognizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = AudioConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audio = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecognizeRequest {
    return {
      config: isSet(object.config) ? AudioConfig.fromJSON(object.config) : undefined,
      audio: isSet(object.audio) ? bytesFromBase64(object.audio) : new Uint8Array(0),
      model: isSet(object.model) ? globalThis.String(object.model) : "",
    };
  },

  toJSON(message: RecognizeRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = AudioConfig.toJSON(message.config);
    }
    if (message.audio.length !== 0) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecognizeRequest>, I>>(base?: I): RecognizeRequest {
    return RecognizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecognizeRequest>, I>>(object: I): RecognizeRequest {
    const message = createBaseRecognizeRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? AudioConfig.fromPartial(object.config)
      : undefined;
    message.audio = object.audio ?? new Uint8Array(0);
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseRecognizeResponse(): RecognizeResponse {
  return { results: [] };
}

export const RecognizeResponse = {
  encode(message: RecognizeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.results) {
      RecognizeResponse_Result.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecognizeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecognizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(RecognizeResponse_Result.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecognizeResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => RecognizeResponse_Result.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecognizeResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => RecognizeResponse_Result.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecognizeResponse>, I>>(base?: I): RecognizeResponse {
    return RecognizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecognizeResponse>, I>>(object: I): RecognizeResponse {
    const message = createBaseRecognizeResponse();
    message.results = object.results?.map((e) => RecognizeResponse_Result.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecognizeResponse_Result(): RecognizeResponse_Result {
  return { transcript: "", confidence: 0, words: [] };
}

export const RecognizeResponse_Result = {
  encode(message: RecognizeResponse_Result, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transcript !== "") {
      writer.uint32(10).string(message.transcript);
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    for (const v of message.words) {
      WordInfo.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecognizeResponse_Result {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecognizeResponse_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transcript = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.words.push(WordInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecognizeResponse_Result {
    return {
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      words: globalThis.Array.isArray(object?.words) ? object.words.map((e: any) => WordInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: RecognizeResponse_Result): unknown {
    const obj: any = {};
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.words?.length) {
      obj.words = message.words.map((e) => WordInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecognizeResponse_Result>, I>>(base?: I): RecognizeResponse_Result {
    return RecognizeResponse_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecognizeResponse_Result>, I>>(object: I): RecognizeResponse_Result {
    const message = createBaseRecognizeResponse_Result();
    message.transcript = object.transcript ?? "";
    message.confidence = object.confidence ?? 0;
    message.words = object.words?.map((e) => WordInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamingRecognizeRequest(): StreamingRecognizeRequest {
  return { config: undefined, audioContent: undefined };
}

export const StreamingRecognizeRequest = {
  encode(message: StreamingRecognizeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      AudioConfig.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    if (message.audioContent !== undefined) {
      writer.uint32(18).bytes(message.audioContent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingRecognizeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingRecognizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = AudioConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audioContent = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingRecognizeRequest {
    return {
      config: isSet(object.config) ? AudioConfig.fromJSON(object.config) : undefined,
      audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : undefined,
    };
  },

  toJSON(message: StreamingRecognizeRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = AudioConfig.toJSON(message.config);
    }
    if (message.audioContent !== undefined) {
      obj.audioContent = base64FromBytes(message.audioContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingRecognizeRequest>, I>>(base?: I): StreamingRecognizeRequest {
    return StreamingRecognizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingRecognizeRequest>, I>>(object: I): StreamingRecognizeRequest {
    const message = createBaseStreamingRecognizeRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? AudioConfig.fromPartial(object.config)
      : undefined;
    message.audioContent = object.audioContent ?? undefined;
    return message;
  },
};

function createBaseStreamingRecognizeResponse(): StreamingRecognizeResponse {
  return { results: [] };
}

export const StreamingRecognizeResponse = {
  encode(message: StreamingRecognizeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.results) {
      StreamingRecognizeResponse_Result.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingRecognizeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingRecognizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(StreamingRecognizeResponse_Result.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingRecognizeResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => StreamingRecognizeResponse_Result.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StreamingRecognizeResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => StreamingRecognizeResponse_Result.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingRecognizeResponse>, I>>(base?: I): StreamingRecognizeResponse {
    return StreamingRecognizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingRecognizeResponse>, I>>(object: I): StreamingRecognizeResponse {
    const message = createBaseStreamingRecognizeResponse();
    message.results = object.results?.map((e) => StreamingRecognizeResponse_Result.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamingRecognizeResponse_Result(): StreamingRecognizeResponse_Result {
  return { transcript: "", confidence: 0, isFinal: false, words: [] };
}

export const StreamingRecognizeResponse_Result = {
  encode(message: StreamingRecognizeResponse_Result, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transcript !== "") {
      writer.uint32(10).string(message.transcript);
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    if (message.isFinal !== false) {
      writer.uint32(24).bool(message.isFinal);
    }
    for (const v of message.words) {
      WordInfo.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingRecognizeResponse_Result {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingRecognizeResponse_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transcript = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isFinal = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.words.push(WordInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingRecognizeResponse_Result {
    return {
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      isFinal: isSet(object.isFinal) ? globalThis.Boolean(object.isFinal) : false,
      words: globalThis.Array.isArray(object?.words) ? object.words.map((e: any) => WordInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: StreamingRecognizeResponse_Result): unknown {
    const obj: any = {};
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.isFinal !== false) {
      obj.isFinal = message.isFinal;
    }
    if (message.words?.length) {
      obj.words = message.words.map((e) => WordInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingRecognizeResponse_Result>, I>>(
    base?: I,
  ): StreamingRecognizeResponse_Result {
    return StreamingRecognizeResponse_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingRecognizeResponse_Result>, I>>(
    object: I,
  ): StreamingRecognizeResponse_Result {
    const message = createBaseStreamingRecognizeResponse_Result();
    message.transcript = object.transcript ?? "";
    message.confidence = object.confidence ?? 0;
    message.isFinal = object.isFinal ?? false;
    message.words = object.words?.map((e) => WordInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWordInfo(): WordInfo {
  return { word: "", startTime: 0, endTime: 0, confidence: 0 };
}

export const WordInfo = {
  encode(message: WordInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.word !== "") {
      writer.uint32(10).string(message.word);
    }
    if (message.startTime !== 0) {
      writer.uint32(21).float(message.startTime);
    }
    if (message.endTime !== 0) {
      writer.uint32(29).float(message.endTime);
    }
    if (message.confidence !== 0) {
      writer.uint32(37).float(message.confidence);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WordInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.word = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.startTime = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.endTime = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.confidence = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordInfo {
    return {
      word: isSet(object.word) ? globalThis.String(object.word) : "",
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
    };
  },

  toJSON(message: WordInfo): unknown {
    const obj: any = {};
    if (message.word !== "") {
      obj.word = message.word;
    }
    if (message.startTime !== 0) {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== 0) {
      obj.endTime = message.endTime;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordInfo>, I>>(base?: I): WordInfo {
    return WordInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordInfo>, I>>(object: I): WordInfo {
    const message = createBaseWordInfo();
    message.word = object.word ?? "";
    message.startTime = object.startTime ?? 0;
    message.endTime = object.endTime ?? 0;
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

export interface RivaSpeechRecognition {
  Recognize(request: RecognizeRequest): Promise<RecognizeResponse>;
  StreamingRecognize(request: Observable<StreamingRecognizeRequest>): Observable<StreamingRecognizeResponse>;
}

export const RivaSpeechRecognitionServiceName = "nvidia.riva.RivaSpeechRecognition";
export class RivaSpeechRecognitionClientImpl implements RivaSpeechRecognition {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RivaSpeechRecognitionServiceName;
    this.rpc = rpc;
    this.Recognize = this.Recognize.bind(this);
    this.StreamingRecognize = this.StreamingRecognize.bind(this);
  }
  Recognize(request: RecognizeRequest): Promise<RecognizeResponse> {
    const data = RecognizeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Recognize", data);
    return promise.then((data) => RecognizeResponse.decode(_m0.Reader.create(data)));
  }

  StreamingRecognize(request: Observable<StreamingRecognizeRequest>): Observable<StreamingRecognizeResponse> {
    const data = request.pipe(map((request) => StreamingRecognizeRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamingRecognize", data);
    return result.pipe(map((data) => StreamingRecognizeResponse.decode(_m0.Reader.create(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
