// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: riva_nmt.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { AudioConfig } from "./riva_services";

export const protobufPackage = "nvidia.riva";

export interface TranslateTextRequest {
  text: string;
  sourceLanguage: string;
  targetLanguage: string;
  doNotTranslatePhrases: string[];
}

export interface TranslateTextResponse {
  text: string;
  translations: string[];
}

export interface StreamingS2SRequest {
  config?: AudioConfig | undefined;
  audioContent?: Uint8Array | undefined;
}

export interface StreamingS2SResponse {
  result: StreamingS2SResponse_Result | undefined;
}

export interface StreamingS2SResponse_Result {
  transcript: string;
  translation: string;
  isPartial: boolean;
  audioContent: Uint8Array;
}

export interface StreamingS2TRequest {
  config?: AudioConfig | undefined;
  audioContent?: Uint8Array | undefined;
}

export interface StreamingS2TResponse {
  result: StreamingS2TResponse_Result | undefined;
}

export interface StreamingS2TResponse_Result {
  transcript: string;
  translation: string;
  isPartial: boolean;
}

export interface AvailableLanguageRequest {
  model: string;
}

export interface AvailableLanguageResponse {
  supportedLanguagePairs: AvailableLanguageResponse_LanguagePair[];
}

export interface AvailableLanguageResponse_LanguagePair {
  sourceLanguageCode: string;
  targetLanguageCode: string;
}

function createBaseTranslateTextRequest(): TranslateTextRequest {
  return { text: "", sourceLanguage: "", targetLanguage: "", doNotTranslatePhrases: [] };
}

export const TranslateTextRequest = {
  encode(message: TranslateTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.sourceLanguage !== "") {
      writer.uint32(18).string(message.sourceLanguage);
    }
    if (message.targetLanguage !== "") {
      writer.uint32(26).string(message.targetLanguage);
    }
    for (const v of message.doNotTranslatePhrases) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TranslateTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceLanguage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetLanguage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.doNotTranslatePhrases.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateTextRequest {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      sourceLanguage: isSet(object.sourceLanguage) ? globalThis.String(object.sourceLanguage) : "",
      targetLanguage: isSet(object.targetLanguage) ? globalThis.String(object.targetLanguage) : "",
      doNotTranslatePhrases: globalThis.Array.isArray(object?.doNotTranslatePhrases)
        ? object.doNotTranslatePhrases.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TranslateTextRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.sourceLanguage !== "") {
      obj.sourceLanguage = message.sourceLanguage;
    }
    if (message.targetLanguage !== "") {
      obj.targetLanguage = message.targetLanguage;
    }
    if (message.doNotTranslatePhrases?.length) {
      obj.doNotTranslatePhrases = message.doNotTranslatePhrases;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateTextRequest>, I>>(base?: I): TranslateTextRequest {
    return TranslateTextRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateTextRequest>, I>>(object: I): TranslateTextRequest {
    const message = createBaseTranslateTextRequest();
    message.text = object.text ?? "";
    message.sourceLanguage = object.sourceLanguage ?? "";
    message.targetLanguage = object.targetLanguage ?? "";
    message.doNotTranslatePhrases = object.doNotTranslatePhrases?.map((e) => e) || [];
    return message;
  },
};

function createBaseTranslateTextResponse(): TranslateTextResponse {
  return { text: "", translations: [] };
}

export const TranslateTextResponse = {
  encode(message: TranslateTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    for (const v of message.translations) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TranslateTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.translations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateTextResponse {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      translations: globalThis.Array.isArray(object?.translations)
        ? object.translations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TranslateTextResponse): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.translations?.length) {
      obj.translations = message.translations;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateTextResponse>, I>>(base?: I): TranslateTextResponse {
    return TranslateTextResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateTextResponse>, I>>(object: I): TranslateTextResponse {
    const message = createBaseTranslateTextResponse();
    message.text = object.text ?? "";
    message.translations = object.translations?.map((e) => e) || [];
    return message;
  },
};

function createBaseStreamingS2SRequest(): StreamingS2SRequest {
  return { config: undefined, audioContent: undefined };
}

export const StreamingS2SRequest = {
  encode(message: StreamingS2SRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      AudioConfig.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    if (message.audioContent !== undefined) {
      writer.uint32(18).bytes(message.audioContent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2SRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2SRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = AudioConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audioContent = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2SRequest {
    return {
      config: isSet(object.config) ? AudioConfig.fromJSON(object.config) : undefined,
      audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : undefined,
    };
  },

  toJSON(message: StreamingS2SRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = AudioConfig.toJSON(message.config);
    }
    if (message.audioContent !== undefined) {
      obj.audioContent = base64FromBytes(message.audioContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2SRequest>, I>>(base?: I): StreamingS2SRequest {
    return StreamingS2SRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2SRequest>, I>>(object: I): StreamingS2SRequest {
    const message = createBaseStreamingS2SRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? AudioConfig.fromPartial(object.config)
      : undefined;
    message.audioContent = object.audioContent ?? undefined;
    return message;
  },
};

function createBaseStreamingS2SResponse(): StreamingS2SResponse {
  return { result: undefined };
}

export const StreamingS2SResponse = {
  encode(message: StreamingS2SResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== undefined) {
      StreamingS2SResponse_Result.encode(message.result, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2SResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2SResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = StreamingS2SResponse_Result.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2SResponse {
    return { result: isSet(object.result) ? StreamingS2SResponse_Result.fromJSON(object.result) : undefined };
  },

  toJSON(message: StreamingS2SResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = StreamingS2SResponse_Result.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2SResponse>, I>>(base?: I): StreamingS2SResponse {
    return StreamingS2SResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2SResponse>, I>>(object: I): StreamingS2SResponse {
    const message = createBaseStreamingS2SResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? StreamingS2SResponse_Result.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseStreamingS2SResponse_Result(): StreamingS2SResponse_Result {
  return { transcript: "", translation: "", isPartial: false, audioContent: new Uint8Array(0) };
}

export const StreamingS2SResponse_Result = {
  encode(message: StreamingS2SResponse_Result, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transcript !== "") {
      writer.uint32(10).string(message.transcript);
    }
    if (message.translation !== "") {
      writer.uint32(18).string(message.translation);
    }
    if (message.isPartial !== false) {
      writer.uint32(24).bool(message.isPartial);
    }
    if (message.audioContent.length !== 0) {
      writer.uint32(34).bytes(message.audioContent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2SResponse_Result {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2SResponse_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transcript = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.translation = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isPartial = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.audioContent = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2SResponse_Result {
    return {
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      translation: isSet(object.translation) ? globalThis.String(object.translation) : "",
      isPartial: isSet(object.isPartial) ? globalThis.Boolean(object.isPartial) : false,
      audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : new Uint8Array(0),
    };
  },

  toJSON(message: StreamingS2SResponse_Result): unknown {
    const obj: any = {};
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.translation !== "") {
      obj.translation = message.translation;
    }
    if (message.isPartial !== false) {
      obj.isPartial = message.isPartial;
    }
    if (message.audioContent.length !== 0) {
      obj.audioContent = base64FromBytes(message.audioContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2SResponse_Result>, I>>(base?: I): StreamingS2SResponse_Result {
    return StreamingS2SResponse_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2SResponse_Result>, I>>(object: I): StreamingS2SResponse_Result {
    const message = createBaseStreamingS2SResponse_Result();
    message.transcript = object.transcript ?? "";
    message.translation = object.translation ?? "";
    message.isPartial = object.isPartial ?? false;
    message.audioContent = object.audioContent ?? new Uint8Array(0);
    return message;
  },
};

function createBaseStreamingS2TRequest(): StreamingS2TRequest {
  return { config: undefined, audioContent: undefined };
}

export const StreamingS2TRequest = {
  encode(message: StreamingS2TRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      AudioConfig.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    if (message.audioContent !== undefined) {
      writer.uint32(18).bytes(message.audioContent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2TRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2TRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = AudioConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audioContent = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2TRequest {
    return {
      config: isSet(object.config) ? AudioConfig.fromJSON(object.config) : undefined,
      audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : undefined,
    };
  },

  toJSON(message: StreamingS2TRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = AudioConfig.toJSON(message.config);
    }
    if (message.audioContent !== undefined) {
      obj.audioContent = base64FromBytes(message.audioContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2TRequest>, I>>(base?: I): StreamingS2TRequest {
    return StreamingS2TRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2TRequest>, I>>(object: I): StreamingS2TRequest {
    const message = createBaseStreamingS2TRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? AudioConfig.fromPartial(object.config)
      : undefined;
    message.audioContent = object.audioContent ?? undefined;
    return message;
  },
};

function createBaseStreamingS2TResponse(): StreamingS2TResponse {
  return { result: undefined };
}

export const StreamingS2TResponse = {
  encode(message: StreamingS2TResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== undefined) {
      StreamingS2TResponse_Result.encode(message.result, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2TResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2TResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = StreamingS2TResponse_Result.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2TResponse {
    return { result: isSet(object.result) ? StreamingS2TResponse_Result.fromJSON(object.result) : undefined };
  },

  toJSON(message: StreamingS2TResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = StreamingS2TResponse_Result.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2TResponse>, I>>(base?: I): StreamingS2TResponse {
    return StreamingS2TResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2TResponse>, I>>(object: I): StreamingS2TResponse {
    const message = createBaseStreamingS2TResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? StreamingS2TResponse_Result.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseStreamingS2TResponse_Result(): StreamingS2TResponse_Result {
  return { transcript: "", translation: "", isPartial: false };
}

export const StreamingS2TResponse_Result = {
  encode(message: StreamingS2TResponse_Result, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transcript !== "") {
      writer.uint32(10).string(message.transcript);
    }
    if (message.translation !== "") {
      writer.uint32(18).string(message.translation);
    }
    if (message.isPartial !== false) {
      writer.uint32(24).bool(message.isPartial);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamingS2TResponse_Result {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingS2TResponse_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transcript = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.translation = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isPartial = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingS2TResponse_Result {
    return {
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      translation: isSet(object.translation) ? globalThis.String(object.translation) : "",
      isPartial: isSet(object.isPartial) ? globalThis.Boolean(object.isPartial) : false,
    };
  },

  toJSON(message: StreamingS2TResponse_Result): unknown {
    const obj: any = {};
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.translation !== "") {
      obj.translation = message.translation;
    }
    if (message.isPartial !== false) {
      obj.isPartial = message.isPartial;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingS2TResponse_Result>, I>>(base?: I): StreamingS2TResponse_Result {
    return StreamingS2TResponse_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingS2TResponse_Result>, I>>(object: I): StreamingS2TResponse_Result {
    const message = createBaseStreamingS2TResponse_Result();
    message.transcript = object.transcript ?? "";
    message.translation = object.translation ?? "";
    message.isPartial = object.isPartial ?? false;
    return message;
  },
};

function createBaseAvailableLanguageRequest(): AvailableLanguageRequest {
  return { model: "" };
}

export const AvailableLanguageRequest = {
  encode(message: AvailableLanguageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AvailableLanguageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailableLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailableLanguageRequest {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: AvailableLanguageRequest): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailableLanguageRequest>, I>>(base?: I): AvailableLanguageRequest {
    return AvailableLanguageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailableLanguageRequest>, I>>(object: I): AvailableLanguageRequest {
    const message = createBaseAvailableLanguageRequest();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseAvailableLanguageResponse(): AvailableLanguageResponse {
  return { supportedLanguagePairs: [] };
}

export const AvailableLanguageResponse = {
  encode(message: AvailableLanguageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.supportedLanguagePairs) {
      AvailableLanguageResponse_LanguagePair.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AvailableLanguageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailableLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.supportedLanguagePairs.push(AvailableLanguageResponse_LanguagePair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailableLanguageResponse {
    return {
      supportedLanguagePairs: globalThis.Array.isArray(object?.supportedLanguagePairs)
        ? object.supportedLanguagePairs.map((e: any) => AvailableLanguageResponse_LanguagePair.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AvailableLanguageResponse): unknown {
    const obj: any = {};
    if (message.supportedLanguagePairs?.length) {
      obj.supportedLanguagePairs = message.supportedLanguagePairs.map((e) =>
        AvailableLanguageResponse_LanguagePair.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailableLanguageResponse>, I>>(base?: I): AvailableLanguageResponse {
    return AvailableLanguageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailableLanguageResponse>, I>>(object: I): AvailableLanguageResponse {
    const message = createBaseAvailableLanguageResponse();
    message.supportedLanguagePairs =
      object.supportedLanguagePairs?.map((e) => AvailableLanguageResponse_LanguagePair.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAvailableLanguageResponse_LanguagePair(): AvailableLanguageResponse_LanguagePair {
  return { sourceLanguageCode: "", targetLanguageCode: "" };
}

export const AvailableLanguageResponse_LanguagePair = {
  encode(message: AvailableLanguageResponse_LanguagePair, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sourceLanguageCode !== "") {
      writer.uint32(10).string(message.sourceLanguageCode);
    }
    if (message.targetLanguageCode !== "") {
      writer.uint32(18).string(message.targetLanguageCode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AvailableLanguageResponse_LanguagePair {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailableLanguageResponse_LanguagePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceLanguageCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetLanguageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailableLanguageResponse_LanguagePair {
    return {
      sourceLanguageCode: isSet(object.sourceLanguageCode) ? globalThis.String(object.sourceLanguageCode) : "",
      targetLanguageCode: isSet(object.targetLanguageCode) ? globalThis.String(object.targetLanguageCode) : "",
    };
  },

  toJSON(message: AvailableLanguageResponse_LanguagePair): unknown {
    const obj: any = {};
    if (message.sourceLanguageCode !== "") {
      obj.sourceLanguageCode = message.sourceLanguageCode;
    }
    if (message.targetLanguageCode !== "") {
      obj.targetLanguageCode = message.targetLanguageCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailableLanguageResponse_LanguagePair>, I>>(
    base?: I,
  ): AvailableLanguageResponse_LanguagePair {
    return AvailableLanguageResponse_LanguagePair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailableLanguageResponse_LanguagePair>, I>>(
    object: I,
  ): AvailableLanguageResponse_LanguagePair {
    const message = createBaseAvailableLanguageResponse_LanguagePair();
    message.sourceLanguageCode = object.sourceLanguageCode ?? "";
    message.targetLanguageCode = object.targetLanguageCode ?? "";
    return message;
  },
};

export interface RivaNMTService {
  TranslateText(request: TranslateTextRequest): Promise<TranslateTextResponse>;
  StreamingTranslateSpeechToSpeech(request: Observable<StreamingS2SRequest>): Observable<StreamingS2SResponse>;
  StreamingTranslateSpeechToText(request: Observable<StreamingS2TRequest>): Observable<StreamingS2TResponse>;
  ListSupportedLanguagePairs(request: AvailableLanguageRequest): Promise<AvailableLanguageResponse>;
}

export const RivaNMTServiceServiceName = "nvidia.riva.RivaNMTService";
export class RivaNMTServiceClientImpl implements RivaNMTService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RivaNMTServiceServiceName;
    this.rpc = rpc;
    this.TranslateText = this.TranslateText.bind(this);
    this.StreamingTranslateSpeechToSpeech = this.StreamingTranslateSpeechToSpeech.bind(this);
    this.StreamingTranslateSpeechToText = this.StreamingTranslateSpeechToText.bind(this);
    this.ListSupportedLanguagePairs = this.ListSupportedLanguagePairs.bind(this);
  }
  TranslateText(request: TranslateTextRequest): Promise<TranslateTextResponse> {
    const data = TranslateTextRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TranslateText", data);
    return promise.then((data) => TranslateTextResponse.decode(_m0.Reader.create(data)));
  }

  StreamingTranslateSpeechToSpeech(request: Observable<StreamingS2SRequest>): Observable<StreamingS2SResponse> {
    const data = request.pipe(map((request) => StreamingS2SRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamingTranslateSpeechToSpeech", data);
    return result.pipe(map((data) => StreamingS2SResponse.decode(_m0.Reader.create(data))));
  }

  StreamingTranslateSpeechToText(request: Observable<StreamingS2TRequest>): Observable<StreamingS2TResponse> {
    const data = request.pipe(map((request) => StreamingS2TRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamingTranslateSpeechToText", data);
    return result.pipe(map((data) => StreamingS2TResponse.decode(_m0.Reader.create(data))));
  }

  ListSupportedLanguagePairs(request: AvailableLanguageRequest): Promise<AvailableLanguageResponse> {
    const data = AvailableLanguageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSupportedLanguagePairs", data);
    return promise.then((data) => AvailableLanguageResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
